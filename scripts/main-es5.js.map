{"version":3,"sources":["scripts.js"],"names":["app","document","querySelector","appForm","apiKey","appPrint","formInput","fetchAutocomplete","e","which","inputValue","value","trim","autocompleteList","length","fetch","then","res","json","cityList","data","list","map","city","id","name","sys","country","join","innerHTML","autocompleteCity","querySelectorAll","forEach","addEventListener","fetchWeatherData","preventDefault","autocompleteListContainer","type","autoCompliteListItems","dataset","updateTime","moment","unix","dt","format","cloudsClass","clouds","all","dataToPrint","weather","main","temp","toFixed","humidity","pressure","wind","deg","speed","forecastContainer","daysFiltered","filter","item","dt_txt","split","dayList","dayOfWeek","day","catch","err","console","log","fetchCityData","dataKey","key","offsetParent","style","display","method","headers"],"mappings":";;AAAA,IAAMA,MAAMC,SAASC,aAAT,CAAuB,MAAvB,CAAZ;AACA,IAAMC,UAAUF,SAASC,aAAT,CAAuB,cAAvB,CAAhB;AACA,IAAME,SAAS,kCAAf;AACA,IAAMC,WAAWJ,SAASC,aAAT,CAAuB,yBAAvB,CAAjB;AACA,IAAMI,YAAYL,SAASC,aAAT,CAAuB,oBAAvB,CAAlB;;AAGA,SAASK,iBAAT,CAA2BC,CAA3B,EAA6B;AAC3B;AACA,MAAGA,EAAEC,KAAF,IAAW,EAAd,EAAkB;AAClB,MAAMC,aAAa,KAAKC,KAAL,CAAWC,IAAX,EAAnB;AACA,MAAMC,mBAAmBZ,SAASC,aAAT,CAAuB,oBAAvB,CAAzB;;AAEA,MAAGQ,WAAWI,MAAX,GAAoB,CAAvB,EAA0B;;AAE1BC,2DAAuDL,UAAvD,eAA2EN,MAA3E,EACGY,IADH,CACQ;AAAA,WAAOC,IAAIC,IAAJ,EAAP;AAAA,GADR,EAEGF,IAFH,CAEQ,gBAAQ;;AAEZ,QAAMG,WAAWC,KAAKC,IAAL,CAAUC,GAAV,CAAc,gBAAQ;AACrC,+DACgDC,KAAKC,EADrD,uBAEMD,KAAKE,IAFX,UAEoBF,KAAKG,GAAL,CAASC,OAF7B;AAKD,KANgB,EAMdC,IANc,CAMT,EANS,CAAjB;;AAQAf,qBAAiBgB,SAAjB,GAA6BV,QAA7B;AACD,GAbH,EAcGH,IAdH,CAcQ,YAAM;AACV,QAAMc,mBAAmB7B,SAAS8B,gBAAT,CAA0B,yBAA1B,CAAzB;AACAD,qBAAiBE,OAAjB,CAAyB,gBAAQ;AAC/BT,WAAKU,gBAAL,CAAsB,OAAtB,EAA+BC,gBAA/B;AACD,KAFD;AAGD,GAnBH;AAoBD;;AAGD,SAASA,gBAAT,CAA0B1B,CAA1B,EAA4B;AAC1BA,IAAE2B,cAAF;AACA,MAAIX,WAAJ;AACA,MAAMY,4BAA4BnC,SAASC,aAAT,CAAuB,oBAAvB,CAAlC;AACA,MAAGM,EAAE6B,IAAF,IAAU,QAAb,EAAsB;AACpB,QAAMC,wBAAwBrC,SAAS8B,gBAAT,CAA0B,yBAA1B,CAA9B;;AAEA,QAAGO,sBAAsBxB,MAAtB,IAAgC,CAAnC,EAAqC;AACnCU,WAAKc,sBAAsB,CAAtB,EAAyBC,OAAzB,CAAiCf,EAAtC;AACAY,gCAA0BP,SAA1B,GAAsC,EAAtC;AACD,KAHD,MAGO;AACLO,gCAA0BP,SAA1B,GAAsC,mDAAtC;AACA;AACD;AAEF,GAXD,MAWO;AACLL,SAAK,KAAKe,OAAL,CAAaf,EAAlB;AACAY,8BAA0BP,SAA1B,GAAsC,EAAtC;AACD;;AAEDd,+DAA2DS,EAA3D,eAAuEpB,MAAvE,EACGY,IADH,CACQ;AAAA,WAAOC,IAAIC,IAAJ,EAAP;AAAA,GADR,EAEGF,IAFH,CAEQ,gBAAO;AACT,QAAMwB,aAAaC,OAAOC,IAAP,CAAYtB,KAAKuB,EAAjB,EAAqBC,MAArB,CAA4B,QAA5B,CAAnB;AACA,QAAIC,oBAAJ;AACA,QAAGzB,KAAK0B,MAAL,CAAYC,GAAZ,GAAkB,EAArB,EAAyB;AACvBF,oBAAc,SAAd;AACD,KAFD,MAEO,IAAGzB,KAAK0B,MAAL,CAAYC,GAAZ,IAAmB,EAAnB,IAAyB3B,KAAK0B,MAAL,CAAYC,GAAZ,IAAmB,GAA/C,EAAmD;AACxDF,oBAAc,SAAd;AACD,KAFM,MAEA;AACLA,oBAAc,UAAd;AACD;;AAED,QAAMG,mGAEoB5B,KAAK6B,OAAL,CAAa,CAAb,EAAgBzB,EAFpC,+NAMmF,CAACJ,KAAK8B,IAAL,CAAUC,IAAV,GAAiB,MAAlB,EAA0BC,OAA1B,CAAkC,CAAlC,CANnF,+MAU6BhC,KAAK8B,IAAL,CAAUG,QAVvC,0NAc6BjC,KAAK8B,IAAL,CAAUI,QAdvC,8JAkBiCd,UAlBjC,6MAsBmCK,WAtBnC,UAsBmDzB,KAAK0B,MAAL,CAAYC,GAtB/D,ySA4B8E3B,KAAKmC,IAAL,CAAUC,GA5BxF,ySAkC6BpC,KAAKmC,IAAL,CAAUE,KAlCvC,sSAAN;;AA4CApD,aAASwB,SAAT,GAAqBmB,WAArB;AACA1C,cAAUK,KAAV,GAAqBS,KAAKK,IAA1B,UAAmCL,KAAKM,GAAL,CAASC,OAA5C;AACD,GA3DL,EA2DOX,IA3DP,CA2DY,YAAM;;AAEZ,QAAM0C,oBAAoBzD,SAASC,aAAT,CAAuB,gBAAvB,CAA1B;;AAEAa,kEAA4DS,EAA5D,eAAwEpB,MAAxE,EACGY,IADH,CACQ;AAAA,aAAOC,IAAIC,IAAJ,EAAP;AAAA,KADR,EAEGF,IAFH,CAEQ,gBAAQ;AACZ,UAAM2C,eAAevC,KAAKC,IAAL,CAAUuC,MAAV,CAAiB,gBAAQ;AAC5C,eAAOC,KAAKC,MAAL,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,KAA6B,UAApC;AACD,OAFoB,CAArB;AAGA,UAAMC,UAAUL,aAAarC,GAAb,CAAiB,eAAO;AACtC,YAAM2C,YAAaxB,OAAOC,IAAP,CAAYwB,IAAIvB,EAAhB,EAAoBC,MAApB,CAA2B,MAA3B,CAAnB;AACA,uFAE2BqB,SAF3B,qDAG0BC,IAAIjB,OAAJ,CAAY,CAAZ,EAAezB,EAHzC,0EAI0B,CAAC0C,IAAIhB,IAAJ,CAASC,IAAT,GAAgB,MAAjB,EAAyBC,OAAzB,CAAiC,CAAjC,CAJ1B;AAOD,OATe,EASbxB,IATa,CASR,EATQ,CAAhB;AAUA8B,wBAAkB7B,SAAlB,GAA8BmC,OAA9B;AACD,KAjBH;AAkBD,GAjFL,EAkFKG,KAlFL,CAkFW,UAACC,GAAD,EAAS;AACdC,YAAQC,GAAR,CAAYF,GAAZ;AACA,QAAG,CAAC,CAACA,GAAL,EAAS;AACPvD,uBAAiBgB,SAAjB,GAA6B,oFAA7B;AACD;AACF,GAvFL;AAwFD;;AAED,SAAS0C,aAAT,GAAyB;AACvB,MAAMC,UAAU,KAAKjC,OAAL,CAAakC,GAA7B;;AAEAnE,YAAUK,KAAV,GAAkB,EAAlB;AACA,OAAK+D,YAAL,CAAkBC,KAAlB,CAAwBC,OAAxB,GAAkC,MAAlC;;AAGA7D,qEAAiEyD,OAAjE,gBAAmFpE,MAAnF,oBAA0G;AACxGyE,YAAQ,KADgG;AAExGC,aAAS;AACP,yBAAmB;AADZ;AAF+F,GAA1G,EAKG9D,IALH,CAKQ;AAAA,WAAOC,IAAIC,IAAJ,GACZF,IADY,CACP,gBAAQ;AACZqD,cAAQC,GAAR,CAAYlD,IAAZ;AACD,KAHY,CAAP;AAAA,GALR;AAUD;;AAGDd,UAAU2B,gBAAV,CAA2B,OAA3B,EAAoC1B,iBAApC;AACAJ,QAAQ8B,gBAAR,CAAyB,QAAzB,EAAmCC,gBAAnC","file":"main-es5.js","sourcesContent":["const app = document.querySelector('.app');\r\nconst appForm = document.querySelector('.search-form');\r\nconst apiKey = '73855c7abb85af3fe9e6ae926705ff06';\r\nconst appPrint = document.querySelector('.weather-info-container');\r\nconst formInput = document.querySelector('.search-form-input');\r\n\r\n\r\nfunction fetchAutocomplete(e){\r\n  //IF ENTER IS PRESSED RETRUN\r\n  if(e.which == 13) return\r\n  const inputValue = this.value.trim();\r\n  const autocompleteList = document.querySelector('.autocomplete-list');\r\n\r\n  if(inputValue.length < 3) return;\r\n\r\n  fetch(`http://api.openweathermap.org/data/2.5/find?q=${inputValue}&APPID=${apiKey}`)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n\r\n      const cityList = data.list.map(city => {\r\n        return(\r\n          `<li class='autocomplete-list-item' data-id=${city.id}>\r\n            ${city.name}, ${city.sys.country}\r\n          </li>`\r\n        )\r\n      }).join('');\r\n\r\n      autocompleteList.innerHTML = cityList;\r\n    })\r\n    .then(() => {\r\n      const autocompleteCity = document.querySelectorAll('.autocomplete-list-item');\r\n      autocompleteCity.forEach(city => {\r\n        city.addEventListener('click', fetchWeatherData);\r\n      })\r\n    })\r\n}\r\n\r\n\r\nfunction fetchWeatherData(e){\r\n  e.preventDefault();\r\n  let id;\r\n  const autocompleteListContainer = document.querySelector('.autocomplete-list');\r\n  if(e.type == 'submit'){\r\n    const autoCompliteListItems = document.querySelectorAll('.autocomplete-list-item')\r\n\r\n    if(autoCompliteListItems.length != 0){\r\n      id = autoCompliteListItems[0].dataset.id;\r\n      autocompleteListContainer.innerHTML = '';\r\n    } else {\r\n      autocompleteListContainer.innerHTML = \"<li class='error-info'>There is no such city</li>\";\r\n      return;\r\n    }\r\n\r\n  } else {\r\n    id = this.dataset.id;\r\n    autocompleteListContainer.innerHTML = '';\r\n  }\r\n\r\n  fetch(`http://api.openweathermap.org/data/2.5/weather?id=${id}&APPID=${apiKey}`)\r\n    .then(res => res.json())\r\n    .then(data=> {\r\n        const updateTime = moment.unix(data.dt).format('h:mm a')\r\n        let cloudsClass;\r\n        if(data.clouds.all < 10) {\r\n          cloudsClass = 'one-num'\r\n        } else if(data.clouds.all >= 10 && data.clouds.all != 100){\r\n          cloudsClass = 'two-num'\r\n        } else {\r\n          cloudsClass = 'tree-num'\r\n        }\r\n\r\n        const dataToPrint = `\r\n          <div class=\"main-icon-container\">\r\n            <i class='wi wi-owm-${data.weather[0].id} main-icon'></i>\r\n          </div>\r\n          <div class=\"current-weather\">\r\n            <div class=\"current-temp\">\r\n              <span class=\"current-temp-info\"><i class='wi wi-thermometer thermometr-icon'></i>${(data.main.temp - 273.15).toFixed(1)}<i class='wi wi-degrees'></i></span>\r\n              <p class=\"weather-text\">Current temp.</p>\r\n            </div>\r\n            <div class=\"humidity-info\">\r\n              <span class=\"weather-info\">${data.main.humidity} <i class='wi wi-humidity humidity-icon'></i></span>\r\n              <p class=\"weather-text\">Humidity</p>\r\n            </div>\r\n            <div class=\"pressure-info\">\r\n              <span class=\"weather-info\">${data.main.pressure} hPa</span>\r\n              <p class=\"weather-text\">Pressure</p>\r\n            </div>\r\n          </div>\r\n          <p class='update-time'>Last update ${updateTime}</p>\r\n          <div class=\"clouds col-1-3\">\r\n            <div class=\"clouds-icon-container\">\r\n              <i class=\"wi wi-cloud clouds-icon\"></i>\r\n              <span class=\"clouds-info-messure ${cloudsClass}\">${data.clouds.all}</span>\r\n              <span class=\"clouds-info-prec\">%</span>\r\n            </div>\r\n            <p class=\"weather-text\">Cloudiness</p>\r\n          </div>\r\n          <div class=\"wind-status col-1-3\">\r\n            <i class=\"wi wi-wind towards-0-deg wind-status-icon\" style=\"transform: rotate(${data.wind.deg}deg)\"></i>\r\n            <p class=\"weather-text\">Wind direction</p>\r\n          </div>\r\n          <div class=\"wind-speed col-1-3\">\r\n            <div class=\"wind-speed-icon-container\">\r\n              <i class=\"wi wi-strong-wind wind-speed-icon\"></i>\r\n              <span class=\"wind-messure\">${data.wind.speed}m/s</span>\r\n            </div>\r\n            <p class=\"weather-text\">Wind speed</p>\r\n          </div>\r\n          <div class=\"forecast-container\">\r\n            <h2 class=\"forecast-title\">Forecast for next 5 days</h2>\r\n            <div class=\"forecast-days\"></div>\r\n          </div>\r\n        `;\r\n\r\n        appPrint.innerHTML = dataToPrint;\r\n        formInput.value = `${data.name}, ${data.sys.country}`;\r\n      }).then(() => {\r\n\r\n        const forecastContainer = document.querySelector('.forecast-days');\r\n\r\n        fetch(`http://api.openweathermap.org/data/2.5/forecast?id=${id}&APPID=${apiKey}`)\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            const daysFiltered = data.list.filter(item => {\r\n              return item.dt_txt.split(' ')[1] == '12:00:00';\r\n            })\r\n            const dayList = daysFiltered.map(day => {\r\n              const dayOfWeek =  moment.unix(day.dt).format('dddd');\r\n              return(\r\n                `<div class=\"forecast-day\">\r\n                  <p class=\"dayOfWeek\">${dayOfWeek}</p>\r\n                  <i class='wi wi-owm-${day.weather[0].id} daily-weather-icon'></i>\r\n                  <p class=\"day-temp\">${(day.main.temp - 273.15).toFixed(1)}<i class='wi wi-degrees'></i></p>\r\n                </div>`\r\n              )\r\n            }).join('');\r\n            forecastContainer.innerHTML = dayList;\r\n          })\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        if(!!err){\r\n          autocompleteList.innerHTML = \"<li class='search-error'>No locations were found that would meet the criteria</li>\"\r\n        }\r\n      })\r\n}\r\n\r\nfunction fetchCityData() {\r\n  const dataKey = this.dataset.key;\r\n\r\n  formInput.value = '';\r\n  this.offsetParent.style.display = 'none';\r\n\r\n\r\n  fetch(`http://dataservice.accuweather.com/currentconditions/v1/${dataKey}?apikey=${apiKey}&details=True`, {\r\n    method: 'get',\r\n    headers: {\r\n      'Accept-Encoding': 'gzip'\r\n    }\r\n  }).then(res => res.json()\r\n    .then(data => {\r\n      console.log(data);\r\n    })\r\n);\r\n}\r\n\r\n\r\nformInput.addEventListener('keyup', fetchAutocomplete);\r\nappForm.addEventListener('submit', fetchWeatherData);\r\n"]}