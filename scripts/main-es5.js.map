{"version":3,"sources":["scripts.js"],"names":["apiKey","apiKey2","appPrint","document","querySelector","formInput","form","autocompleteList","fetchAutocomplete","e","which","inputValue","value","trim","innerHTML","length","fetch","then","res","ok","json","handleError","data","list","cityArray","map","fechedData","city","coord","lat","lon","cityDataArrayItem","location","results","locations","id","Promise","all","arrayOfCities","values","cityAndCountryName","cityData","adminArea5","adminArea1","stateName","adminArea3","join","autocompleteListItems","querySelectorAll","forEach","listItem","addEventListener","fetchWeatherData","catch","dataset","updateTime","moment","unix","dt","format","cloudsClass","clouds","dataToPrint","weather","main","temp","toFixed","humidity","pressure","wind","deg","speed","name","sys","country","forecastContainer","daysFiltered","filter","item","dt_txt","split","dayList","dayOfWeek","day","err","preventDefault"],"mappings":"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","file":"main-es5.js","sourcesContent":["const apiKey = '73855c7abb85af3fe9e6ae926705ff06';\r\nconst apiKey2 = 'iNws003BsfzxWmZR16akCEz9FYqfOor3';\r\nconst appPrint = document.querySelector('.weather-info-container');\r\nconst formInput = document.querySelector('.search-form-input');\r\nconst form = document.querySelector('.search-form');\r\nconst autocompleteList = document.querySelector('.autocomplete-list');\r\n\r\nfunction fetchAutocomplete(e){\r\n  //IF KEY PRESSED IS LETTER KEY OR BACKSPACE\r\n  if (!(e.which >= 65 && e.which <= 90 || e.which == 8)) return;\r\n  const inputValue = this.value.trim();\r\n  //CLEAR LIST\r\n  autocompleteList.innerHTML = '';\r\n  if(inputValue.length < 3) return;\r\n  //LOADING\r\n  autocompleteList.innerHTML = \"<li class='autocomplete-list-item loading-list'><i class='wi wi-day-sunny loading-autocomplete'></i></li>\";\r\n\r\n  fetch(`https://api.openweathermap.org/data/2.5/find?q=${inputValue}&APPID=${apiKey}`, {\r\n    'method': 'get'\r\n  })\r\n    .then(res => {\r\n      if(res.ok){\r\n        return res.json();\r\n      } else {\r\n        handleError();\r\n      }\r\n    })\r\n    .then(data => {\r\n      //IF THER IS NO DATA RETRUN\r\n      if(!data.list.length) {\r\n        autocompleteList.innerHTML = \"<li class='error-info'>There is no such city</li>\";\r\n        return;\r\n      }\r\n\r\n      const cityArray = data.list.map(city => {\r\n        const fechedData = fetch(`https://open.mapquestapi.com/geocoding/v1/reverse?key=${apiKey2}&location=${city.coord.lat},${city.coord.lon}&includeNearestIntersection=true`, {\r\n          'method': 'get'\r\n        })\r\n        .then(res => {\r\n          if(res.ok){\r\n            return res.json();\r\n          } else {\r\n            handleError();\r\n          }\r\n        })\r\n        .then(data => {\r\n          const cityDataArrayItem = {\r\n            location: data.results[0].locations[0],\r\n            id: city.id\r\n          };\r\n          return cityDataArrayItem;\r\n        })\r\n        return fechedData;\r\n      })\r\n      return cityArray;\r\n    })\r\n    .then((data)=>{\r\n      //IF THER IS NO DATA RETURN\r\n      if(!data) return;\r\n\r\n      Promise.all(data).then(values => {\r\n        const arrayOfCities = values.map(cityData => {\r\n          const cityAndCountryName = `<p class='autocomplete-list-cityCountry'>${cityData.location.adminArea5}, ${cityData.location.adminArea1}</p>`;\r\n          const stateName = `<span class='autocomplete-list-state'>${cityData.location.adminArea3}</span>`;\r\n         return(\r\n         `<li class='autocomplete-list-item' data-id='${cityData.id}'>\r\n            ${cityAndCountryName}${stateName}\r\n          </li>`\r\n         )\r\n        }).join('');\r\n\r\n        autocompleteList.innerHTML = arrayOfCities\r\n      })\r\n      .then(()=> {\r\n        const autocompleteListItems = document.querySelectorAll('.autocomplete-list-item');\r\n\r\n        autocompleteListItems.forEach( listItem => {\r\n          listItem.addEventListener('click', fetchWeatherData);\r\n        })\r\n      })\r\n      .catch(() => handleError);\r\n    })\r\n    .catch(() => handleError);\r\n}\r\n\r\n\r\nfunction fetchWeatherData(){\r\n  const id = this.dataset.id;\r\n  //CLEAR SEARCH RESULTS\r\n  autocompleteList.innerHTML = '';\r\n  //ADDD LOADING SCREEN\r\n  appPrint.innerHTML = \"<i class='loading wi wi-day-sunny'></i>\";\r\n\r\n  fetch(`https://api.openweathermap.org/data/2.5/weather?id=${id}&APPID=${apiKey}`, {\r\n    'method': 'get'\r\n  })\r\n    .then(res => {\r\n      if(res.ok){\r\n        return res.json();\r\n      } else {\r\n        handleError();\r\n      }\r\n    })\r\n    .then(data=> {\r\n        const updateTime = moment.unix(data.dt).format('h:mm a')\r\n        let cloudsClass;\r\n        if(data.clouds.all < 10) {\r\n          cloudsClass = 'one-num'\r\n        } else if(data.clouds.all >= 10 && data.clouds.all != 100){\r\n          cloudsClass = 'two-num'\r\n        } else {\r\n          cloudsClass = 'tree-num'\r\n        }\r\n\r\n        const dataToPrint = `\r\n          <div class=\"main-icon-container\">\r\n            <i class='wi wi-owm-${data.weather[0].id} main-icon'></i>\r\n          </div>\r\n          <div class=\"current-weather\">\r\n            <div class=\"current-temp\">\r\n              <span class=\"current-temp-info\"><i class='wi wi-thermometer thermometr-icon'></i>${(data.main.temp - 273.15).toFixed(1)}<i class='wi wi-degrees'></i></span>\r\n              <p class=\"weather-text\">Current temp.</p>\r\n            </div>\r\n            <div class=\"humidity-info\">\r\n              <span class=\"weather-info\">${data.main.humidity} <i class='wi wi-humidity humidity-icon'></i></span>\r\n              <p class=\"weather-text\">Humidity</p>\r\n            </div>\r\n            <div class=\"pressure-info\">\r\n              <span class=\"weather-info\">${data.main.pressure} hPa</span>\r\n              <p class=\"weather-text\">Pressure</p>\r\n            </div>\r\n          </div>\r\n          <p class='update-time'>Last update ${updateTime}</p>\r\n          <div class=\"clouds col-1-3\">\r\n            <div class=\"clouds-icon-container\">\r\n              <i class=\"wi wi-cloud clouds-icon\"></i>\r\n              <span class=\"clouds-info-messure ${cloudsClass}\">${data.clouds.all}</span>\r\n              <span class=\"clouds-info-prec\">%</span>\r\n            </div>\r\n            <p class=\"weather-text\">Cloudiness</p>\r\n          </div>\r\n          <div class=\"wind-status col-1-3\">\r\n            <i class=\"wi wi-wind towards-0-deg wind-status-icon\" style=\"transform: rotate(${data.wind.deg}deg)\"></i>\r\n            <p class=\"weather-text\">Wind direction</p>\r\n          </div>\r\n          <div class=\"wind-speed col-1-3\">\r\n            <div class=\"wind-speed-icon-container\">\r\n              <i class=\"wi wi-strong-wind wind-speed-icon\"></i>\r\n              <span class=\"wind-messure\">${data.wind.speed}m/s</span>\r\n            </div>\r\n            <p class=\"weather-text\">Wind speed</p>\r\n          </div>\r\n          <div class=\"forecast-container\">\r\n            <h2 class=\"forecast-title\">Forecast for next 5 days</h2>\r\n            <div class=\"forecast-days\"></div>\r\n          </div>\r\n        `;\r\n\r\n        formInput.value = `${data.name}, ${data.sys.country}`;\r\n        return dataToPrint;\r\n      })\r\n      .then(data => appPrint.innerHTML = data)\r\n      .then(() => {\r\n\r\n        const forecastContainer = document.querySelector('.forecast-days');\r\n\r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?id=${id}&APPID=${apiKey}`)\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            const daysFiltered = data.list.filter(item => {\r\n              return item.dt_txt.split(' ')[1] == '12:00:00';\r\n            })\r\n            const dayList = daysFiltered.map(day => {\r\n              const dayOfWeek =  moment.unix(day.dt).format('dddd');\r\n              return(\r\n                `<div class=\"forecast-day\">\r\n                  <p class=\"dayOfWeek\">${dayOfWeek}</p>\r\n                  <i class='wi wi-owm-${day.weather[0].id} daily-weather-icon'></i>\r\n                  <p class=\"day-temp\">${(day.main.temp - 273.15).toFixed(1)}<i class='wi wi-degrees'></i></p>\r\n                </div>`\r\n              )\r\n            }).join('');\r\n            forecastContainer.innerHTML = dayList;\r\n          })\r\n      })\r\n      .catch((err) => handleError);\r\n}\r\n\r\nfunction handleError(){\r\n  autocompleteList.innerHTML = \"<li class='fetch-error'>Something went wrong</li>\"\r\n}\r\n\r\n\r\nformInput.addEventListener('keyup', fetchAutocomplete);\r\nform.addEventListener('submit', (e) => e.preventDefault());\r\n"]}